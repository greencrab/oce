From 82de4a413299ed72eeb528e18a34baa5fb194fe4 Mon Sep 17 00:00:00 2001
From: tpaviot <tpaviot@gmail.com>
Date: Fri, 22 Jul 2011 20:28:23 +0200
Subject: [PATCH 26/26] [warning-fix][unhandled-enumeration-value]

Fix these warnings by adding a default NULL behavior:
default: /* Do nothing */ break;

Enough for fixing warnings, some cases would certainly
require than an exception is raised.
---
 src/Adaptor3d/Adaptor3d_HSurfaceTool.cxx       |    2 ++
 src/Aspect/Aspect_ColorScale.cxx               |    1 +
 src/BRepExtrema/BRepExtrema_DistShapeShape.cxx |    2 ++
 src/BRepExtrema/BRepExtrema_DistanceSS.cxx     |    4 ++++
 src/ChFi3d/ChFi3d_Builder_0.cxx                |    1 +
 src/DDocStd/DDocStd_ApplicationCommands.cxx    |    3 ++-
 src/DNaming/DNaming_TransformationDriver.cxx   |    1 +
 src/GeomAdaptor/GeomAdaptor_Surface.cxx        |   12 ++++++++++++
 src/GeomInt/GeomInt_LineConstructor.cxx        |    1 +
 src/Graphic2d/Graphic2d_SetOfMarkers.cxx       |    2 ++
 src/IntPatch/IntPatch_HInterTool.cxx           |    1 +
 src/IntPatch/IntPatch_ImpPrmIntersection.cxx   |    2 ++
 src/IntPatch/IntPatch_Intersection.cxx         |    1 +
 src/IntPatch/IntPatch_Point.cxx                |    4 ++++
 src/IntTools/IntTools_LineConstructor.cxx      |    1 +
 src/TopOpeBRep/TopOpeBRep_LineInter.cxx        |    2 ++
 src/VrmlData/VrmlData_ShapeConvert.cxx         |    1 +
 src/XSDRAWSTLVRML/XSDRAWSTLVRML.cxx            |    1 +
 18 files changed, 41 insertions(+), 1 deletions(-)

Index: oce/src/Adaptor3d/Adaptor3d_HSurfaceTool.cxx
===================================================================
--- oce.orig/src/Adaptor3d/Adaptor3d_HSurfaceTool.cxx
+++ oce/src/Adaptor3d/Adaptor3d_HSurfaceTool.cxx
@@ -17,6 +17,7 @@
       return (nbs < 2 ? 2 : nbs);
     }
     case GeomAbs_Torus: return 20;
+    default: /* Do nothing */ break;
   }
   return 10;
 }
@@ -38,6 +39,7 @@
     case GeomAbs_Torus:
     case GeomAbs_SurfaceOfRevolution:
     case GeomAbs_SurfaceOfExtrusion: return 15;
+    default: /* Do nothing */ break;
   }
   return 10;
 }
Index: oce/src/Aspect/Aspect_ColorScale.cxx
===================================================================
--- oce.orig/src/Aspect/Aspect_ColorScale.cxx
+++ oce/src/Aspect/Aspect_ColorScale.cxx
@@ -506,6 +506,7 @@
     case Aspect_TOCSP_RIGHT:
       x += colorWidth + spacer;
       break;
+    default: /* Do nothing */ break;
     }
     while ( i2 - i1 >= filter || ( i2 == 0 && i1 == 0 ) ) {
       Standard_Integer pos1 = i1;
Index: oce/src/BRepExtrema/BRepExtrema_DistShapeShape.cxx
===================================================================
--- oce.orig/src/BRepExtrema/BRepExtrema_DistShapeShape.cxx
+++ oce/src/BRepExtrema/BRepExtrema_DistShapeShape.cxx
@@ -455,6 +455,7 @@
         ParOnFaceS1(i,r1,r2);
         o << "parameters on the first face :  u= " << r1 << " v=" <<  r2 << endl;
         break;
+      default: /* Do nothing */ break;
     }
     switch (SupportTypeShape2(i))
     {
@@ -466,6 +467,7 @@
         ParOnFaceS2(i,r1,r2);
         o << "parameters on the second face : u= " << r1 << " v=" <<  r2 << endl;
         break;
+      default: /* Do nothing */ break;
     }
     o<<endl;
   } 
Index: oce/src/BRepExtrema/BRepExtrema_DistanceSS.cxx
===================================================================
--- oce.orig/src/BRepExtrema/BRepExtrema_DistanceSS.cxx
+++ oce/src/BRepExtrema/BRepExtrema_DistanceSS.cxx
@@ -529,6 +529,7 @@
           Perform( V1, F2, B1, B2 );
           break;
         }
+        default: /* Do nothing */ break;
       }
       break;
     }
@@ -569,6 +570,7 @@
           Perform( E1, F2, B1, B2 );
           break;
         }
+        default: /* Do nothing */ break;
       }
       break;
     }
@@ -601,9 +603,11 @@
           Perform( F1, F2, B1, B2 );
           break;
         }
+        default: /* Do nothing */ break;
       }
       break;
     }
+    default: /* Do nothing */ break;
   }
 }
 
Index: oce/src/ChFi3d/ChFi3d_Builder_0.cxx
===================================================================
--- oce.orig/src/ChFi3d/ChFi3d_Builder_0.cxx
+++ oce/src/ChFi3d/ChFi3d_Builder_0.cxx
@@ -1749,6 +1749,7 @@
   switch (T1)  {
     case IntSurf_In:  return TopAbs_FORWARD;
     case IntSurf_Out: return TopAbs_REVERSED;
+    default: /* Do nothing */ break;
   }
   return TopAbs_INTERNAL;
 }
Index: oce/src/DDocStd/DDocStd_ApplicationCommands.cxx
===================================================================
--- oce.orig/src/DDocStd/DDocStd_ApplicationCommands.cxx
+++ oce/src/DDocStd/DDocStd_ApplicationCommands.cxx
@@ -193,7 +193,7 @@
 	di << " could not retrieve , permission denied " << "\n" ;  
 	break;
       }
-	
+      default: /* Do nothing */ break;
       }
       di << "DDocStd_Open : Error" << "\n";
     }	
@@ -255,6 +255,7 @@
       case CDF_SS_Failure: {
 	di << " Write failure " << "\n" ;  
       }
+      default: /* Do nothing */ break;
       }
       return 1;
     } else {
Index: oce/src/DNaming/DNaming_TransformationDriver.cxx
===================================================================
--- oce.orig/src/DNaming/DNaming_TransformationDriver.cxx
+++ oce/src/DNaming/DNaming_TransformationDriver.cxx
@@ -316,6 +316,7 @@
       }
   }
     break;
+  default: /* Do nothing */ break;
   }   
 }
 
Index: oce/src/GeomAdaptor/GeomAdaptor_Surface.cxx
===================================================================
--- oce.orig/src/GeomAdaptor/GeomAdaptor_Surface.cxx
+++ oce/src/GeomAdaptor/GeomAdaptor_Surface.cxx
@@ -181,6 +181,7 @@
         case GeomAbs_CN : return GeomAbs_CN; 
         case GeomAbs_C2 : return GeomAbs_C1; 
         case GeomAbs_C1 : return GeomAbs_C0;
+        default: /* Do nothing */ break;
       }
       Standard_NoSuchObject::Raise("GeomAdaptor_Surface::UContinuity");
 	  break;
@@ -192,6 +193,7 @@
       return GC.Continuity();
     }
 	case GeomAbs_OtherSurface: Standard_NoSuchObject::Raise("GeomAdaptor_Surface::UContinuity");
+	default: /* Do nothing */ break;
   }
   return GeomAbs_CN;
 }
@@ -222,6 +224,7 @@
         case GeomAbs_CN : return GeomAbs_CN; 
         case GeomAbs_C2 : return GeomAbs_C1;
         case GeomAbs_C1 : return GeomAbs_C0;
+        default: /* Do nothing */ break;
       }
       Standard_NoSuchObject::Raise("GeomAdaptor_Surface::VContinuity");
       break;
@@ -233,6 +236,7 @@
       return GC.Continuity();
     }
 	case GeomAbs_OtherSurface: Standard_NoSuchObject::Raise("GeomAdaptor_Surface::VContinuity");
+	default: /* Do nothing */ break;
   }
   return GeomAbs_CN;
 }
@@ -270,10 +274,12 @@
         case GeomAbs_C0: BaseS = GeomAbs_C1; break;
         case GeomAbs_C1: BaseS = GeomAbs_C2; break;
         case GeomAbs_C2: BaseS = GeomAbs_C3; break;
+        default: /* Do nothing */ break;
       }
       GeomAdaptor_Surface Sur((*((Handle(Geom_OffsetSurface)*)&mySurface))->BasisSurface());
       return Sur.NbUIntervals(BaseS);
     }
+    default: /* Do nothing */ break;
   }
   return 1;
 }
@@ -311,10 +317,12 @@
         case GeomAbs_C0: BaseS = GeomAbs_C1; break;
         case GeomAbs_C1: BaseS = GeomAbs_C2; break;
         case GeomAbs_C2: BaseS = GeomAbs_C3; break;
+        default: /* Do nothing */ break;
       }
       GeomAdaptor_Surface Sur((*((Handle(Geom_OffsetSurface)*)&mySurface))->BasisSurface());
       return Sur.NbVIntervals(BaseS);
 	}
+    default: /* Do nothing */ break;
   }
   return 1;
 }
@@ -359,11 +367,13 @@
         case GeomAbs_C0: BaseS = GeomAbs_C1; break;
         case GeomAbs_C1: BaseS = GeomAbs_C2; break;
         case GeomAbs_C2: BaseS = GeomAbs_C3; break;
+        default: /* Do nothing */ break;
       }
       GeomAdaptor_Surface Sur((*((Handle(Geom_OffsetSurface)*)&mySurface))->BasisSurface());
       myNbUIntervals = Sur.NbUIntervals(BaseS);
       Sur.UIntervals(T, BaseS);
     }
+    default: /* Do nothing */ break;
   }
 
   T(T.Lower()) = myUFirst;
@@ -410,11 +420,13 @@
         case GeomAbs_C0: BaseS = GeomAbs_C1; break;
         case GeomAbs_C1: BaseS = GeomAbs_C2; break;
         case GeomAbs_C2: BaseS = GeomAbs_C3; break;
+        default: /* Do nothing */ break;
       }
       GeomAdaptor_Surface Sur((*((Handle(Geom_OffsetSurface)*)&mySurface))->BasisSurface());
       myNbVIntervals = Sur.NbVIntervals(BaseS);
       Sur.VIntervals(T, BaseS);
     }
+    default: /* Do nothing */ break;
   }
   
   T(T.Lower()) = myVFirst;
Index: oce/src/GeomInt/GeomInt_LineConstructor.cxx
===================================================================
--- oce.orig/src/GeomInt/GeomInt_LineConstructor.cxx
+++ oce/src/GeomInt/GeomInt_LineConstructor.cxx
@@ -244,6 +244,7 @@
           case IntPatch_Ellipse:   Pmid = ElCLib::Value(pmid,GLine->Ellipse()); break;
           case IntPatch_Hyperbola: Pmid = ElCLib::Value(pmid,GLine->Hyperbola()); break;
           case IntPatch_Parabola:  Pmid = ElCLib::Value(pmid,GLine->Parabola()); break;
+          default: /* Do nothing */ break;
         }
         Parameters(myHS1,myHS2,Pmid,u1,v1,u2,v2);
         Recadre(myHS1,myHS2,u1,v1,u2,v2);
Index: oce/src/Graphic2d/Graphic2d_SetOfMarkers.cxx
===================================================================
--- oce.orig/src/Graphic2d/Graphic2d_SetOfMarkers.cxx
+++ oce/src/Graphic2d/Graphic2d_SetOfMarkers.cxx
@@ -292,6 +292,7 @@
 	return Standard_True;
       break;
     }
+    default: /* Do nothing */ break;
   }
 #endif
   return Standard_False;
@@ -332,6 +333,7 @@
 	return Standard_True;
       break;
     }
+    default: /* Do nothing */ break;
   }
 #endif
   return Standard_False;
Index: oce/src/IntPatch/IntPatch_HInterTool.cxx
===================================================================
--- oce.orig/src/IntPatch/IntPatch_HInterTool.cxx
+++ oce/src/IntPatch/IntPatch_HInterTool.cxx
@@ -72,6 +72,7 @@
     //case GeomAbs_Sphere:
     //case GeomAbs_SurfaceOfRevolution:
     //case GeomAbs_SurfaceOfExtrusion: return 10;
+    default: /* Do nothing */ break;
   }
   return 10;
 }
Index: oce/src/IntPatch/IntPatch_ImpPrmIntersection.cxx
===================================================================
--- oce.orig/src/IntPatch/IntPatch_ImpPrmIntersection.cxx
+++ oce/src/IntPatch/IntPatch_ImpPrmIntersection.cxx
@@ -359,6 +359,7 @@
     case GeomAbs_Sphere:
       while(U1<(U1p-1.5*PI)) U1+=PI+PI;
       while(U1>(U1p+1.5*PI)) U1-=PI+PI;
+    default: /* Do nothing */ break;
   }
   switch(typeS2)
   { 
@@ -370,6 +371,7 @@
     case GeomAbs_Sphere:
       while(U2<(U2p-1.5*PI)) U2+=PI+PI;
       while(U2>(U2p+1.5*PI)) U2-=PI+PI;
+    default: /* Do nothing */ break;
   }
   pt.SetParameters(U1,V1,U2,V2);
 }
Index: oce/src/IntPatch/IntPatch_Intersection.cxx
===================================================================
--- oce.orig/src/IntPatch/IntPatch_Intersection.cxx
+++ oce/src/IntPatch/IntPatch_Intersection.cxx
@@ -614,6 +614,7 @@
 	  }
       break;
     }
+    default: /* Do nothing */ break;
   }
 }
 //================================================================================
Index: oce/src/IntPatch/IntPatch_Point.cxx
===================================================================
--- oce.orig/src/IntPatch/IntPatch_Point.cxx
+++ oce/src/IntPatch/IntPatch_Point.cxx
@@ -68,6 +68,7 @@
     {
 	  case IntSurf_In: TLine.SetValue(Standard_False,IntSurf_Out); break;
 	  case IntSurf_Out: TLine.SetValue(Standard_False,IntSurf_In); break;
+	  default: /* Do nothing */ break;
 	}
     traline1=TLine;
     IntSurf_Transition TArc;
@@ -75,6 +76,7 @@
     {
 	  case IntSurf_In: TArc.SetValue(Standard_False,IntSurf_Out); break;
 	  case IntSurf_Out: TArc.SetValue(Standard_False,IntSurf_In); break;
+	  default: /* Do nothing */ break;
 	}
     tra1=TArc;
   }
@@ -85,6 +87,7 @@
     {
 	  case IntSurf_In: TLine.SetValue(Standard_False,IntSurf_Out); break;
 	  case IntSurf_Out: TLine.SetValue(Standard_False,IntSurf_In); break;
+	  default: /* Do nothing */ break;
 	}
     traline2=TLine;
     IntSurf_Transition TArc;
@@ -92,6 +95,7 @@
     {
 	  case IntSurf_In: TArc.SetValue(Standard_False,IntSurf_Out); break;
 	  case IntSurf_Out: TArc.SetValue(Standard_False,IntSurf_In); break;
+	  default: /* Do nothing */ break;
 	}
     tra2=TArc;
   }  
Index: oce/src/IntTools/IntTools_LineConstructor.cxx
===================================================================
--- oce.orig/src/IntTools/IntTools_LineConstructor.cxx
+++ oce/src/IntTools/IntTools_LineConstructor.cxx
@@ -323,6 +323,7 @@
           case IntPatch_Ellipse:   Pmid = ElCLib::Value(pmid,GLine->Ellipse()); break;
           case IntPatch_Hyperbola: Pmid = ElCLib::Value(pmid,GLine->Hyperbola()); break;
           case IntPatch_Parabola:  Pmid = ElCLib::Value(pmid,GLine->Parabola()); break;
+          default: /* Do nothing */ break;
         }
 	Parameters(myHS1,myHS2,Pmid,u1,v1,u2,v2);
 	Recadre(myHS1,myHS2,u1,v1,u2,v2);
Index: oce/src/TopOpeBRep/TopOpeBRep_LineInter.cxx
===================================================================
--- oce.orig/src/TopOpeBRep/TopOpeBRep_LineInter.cxx
+++ oce/src/TopOpeBRep/TopOpeBRep_LineInter.cxx
@@ -329,6 +329,7 @@
   {
     case TopOpeBRep_CIRCLE  :
     case TopOpeBRep_ELLIPSE : return Standard_True;
+    default: /* Do nothing */ break;
   }
   return Standard_False;
 }
@@ -394,6 +395,7 @@
   switch (myTypeLineCurve)
   {
     case TopOpeBRep_WALKING : return myILW->NbPnts();
+    default: /* Do nothing */ break;
   }
   return 0;
 }
Index: oce/src/VrmlData/VrmlData_ShapeConvert.cxx
===================================================================
--- oce.orig/src/VrmlData/VrmlData_ShapeConvert.cxx
+++ oce/src/VrmlData/VrmlData_ShapeConvert.cxx
@@ -279,6 +279,7 @@
             }
           }
           break;
+        default: /* Do nothing */ break;
         }
         
         if (aTShapeNode.IsNull() == Standard_False) {
Index: oce/src/XSDRAWSTLVRML/XSDRAWSTLVRML.cxx
===================================================================
--- oce.orig/src/XSDRAWSTLVRML/XSDRAWSTLVRML.cxx
+++ oce/src/XSDRAWSTLVRML/XSDRAWSTLVRML.cxx
@@ -163,6 +163,7 @@
       case VrmlData_NonPositiveSize:    aStr = "NonPositiveSize"; break;
       case VrmlData_ReadUnknownNode:    aStr = "ReadUnknownNode"; break;
       case VrmlData_NonSupportedFeature:aStr = "NonSupportedFeature"; break;
+      default: /* Do nothing */ break;
       }
       if (aStr) {
         di << " ++ VRML Error: " << aStr << " in line "
